{
  "static_dict": {
    "project_name": "test_project",
    "father_path": "result"
  },
  "models": {
    "filepath": "{{father_path}}/{{project_name}}/internal/models/mysqlModel",
    "file_header": "// coding: utf-8\n// @Author : lryself\n// @Software: GoLand\n\npackage mysqlModel\n\n",
    "struct": {
      "header": "type {{StructName}} struct {\n",
      "row": "\t{{ColumnName}} {{GoType}} `gorm:\"column:{{ColumnName}};{{ColumnKey}}{{ColumnType}}{{ColumnNull}}{{ColumnDefault}}\" json:\"{{ColumnName}}\" form:\"{{ColumnName}}\"`\n",
      "footer": "}\n"
    },
    "methods": {
      "table_name": "func (m *{{StructName}}) TableName() string {\n\treturn \"{{TableName}}\"\n}\n",
      "get_set": "func (m *{{StructName}}) Get{{ColumnName}}() {{GoType}} {\n\treturn m.{{ColumnName}}\n}\nfunc (m *{{StructName}}) Set{{ColumnName}}({{ColumnName}} {{GoType}}) {\n\tm.{{ColumnName}} = {{ColumnName}}\n}\n"
    }
  },
  "dao": {
    "filepath": "{{father_path}}/{{project_name}}/internal/dao",
    "file_header": "// coding: utf-8\n// @Author : lryself\n// @Software: GoLand\n\npackage dao\n\nimport (\n\t\"{{project_name}}/internal/globals/database\"\n\t\"{{project_name}}/internal/models/mysqlModel\"\n)\n\n",
    "struct": "type {{StructName}}Dao struct {\n\tmysqlModel.{{StructName}}\n}\n\n",
    "methods":{
      "crud": "func (m *{{StructName}}Dao) Get() error {\n\tmysqlManager := database.GetMysqlClient()\n\treturn mysqlManager.Where(map[string]interface{}{\n\t\t\"IsDeleted\": 0,\n\t}).Where(m).Take(m).Error\n}\n\nfunc (m *{{StructName}}Dao) Add() error {\n\tmysqlManager := database.GetMysqlClient()\n\treturn mysqlManager.Create(&m).Error\n}\n\nfunc (m *{{StructName}}Dao) Update(args map[string]interface{}) error {\n\tmysqlManager := database.GetMysqlClient()\n\terr := m.Get()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn mysqlManager.Model(&m).Updates(args).Error\n}\n\nfunc (m *{{StructName}}Dao) Delete() error {\n\tmysqlManager := database.GetMysqlClient()\n\terr := m.Get()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn mysqlManager.Model(&m).Updates(map[string]interface{}{\n\t\t\"IsDeleted\": 1,\n\t}).Error\n}"
    }
  },
  "services": {
    "filepath": "{{father_path}}/{{project_name}}/internal/services",
    "file_header": "// coding: utf-8\n// @Author : lryself\n// @Software: GoLand\n\npackage services\n\nimport \"{{project_name}}/internal/dao\"\n\n",
    "struct": "type {{StructName}}Service struct {\n\tdao.{{StructName}}Dao\n}"
  },
  "apis": {
    "filepath": "{{father_path}}/{{project_name}}/internal/apis/crudApis",
    "file_header": "// coding: utf-8\n// @Author : lryself\n// @Software: GoLand\n\npackage crudApis\n\nimport (\n\t\"{{project_name}}/internal/globals/responseParser\"\n\t\"{{project_name}}/internal/services\"\n\t\"{{project_name}}/internal/utils/structs\"\n\t\"github.com/gin-gonic/gin\"\n)\n",
    "methods":{
      "crud": "func {{StructName}}Api(c *gin.Context) {\n\tvar err error\n\tvar {{StructName}}Service services.{{StructName}}Service\n\terr = c.ShouldBind(&{{StructName}}Service)\n\n\tif c.Request.Method == \"GET\" {\n\t\terr = {{StructName}}Service.Get()\n\t\tif err != nil {\n\t\t\tresponseParser.JsonDBError(c, \"\", err)\n\t\t\treturn\n\t\t}\n\t} else if c.Request.Method == \"POST\" {\n\t\terr = {{StructName}}Service.Add()\n\t\tif err != nil {\n\t\t\tresponseParser.JsonDBError(c, \"\", err)\n\t\t\treturn\n\t\t}\n\t} else if c.Request.Method == \"PUT\" {\n\t\targs, err := structs.StructToMap({{StructName}}Service.{{StructName}}Dao.{{StructName}}, \"json\")\n\t\tif err != nil {\n\t\t\tresponseParser.JsonParameterIllegal(c, \"\", err)\n\t\t}\n\t\t// todo AutoID为业务主键名\n\t\tdelete(args, \"AutoID\")\n\n\t\ttemp := services.{{StructName}}Service{}\n\t\ttemp.AutoID = {{StructName}}Service.AutoID\n\t\terr = temp.Update(args)\n\t\tif err != nil {\n\t\t\tresponseParser.JsonDBError(c, \"\", err)\n\t\t\treturn\n\t\t}\n\t} else if c.Request.Method == \"DELETE\" {\n\t\terr = {{StructName}}Service.Delete()\n\t\tif err != nil {\n\t\t\tresponseParser.JsonDBError(c, \"\", err)\n\t\t\treturn\n\t\t}\n\t}\n\n\tresponseParser.JsonOK(c, \"\", {{StructName}}Service)\n}"
    }
  },
  "routers": {
    "filepath": "{{father_path}}/{{project_name}}/internal/routers/api1_0/crud",
    "file_header": "// coding: utf-8\n// @Author : lryself\n// @Software: GoLand\n\npackage crud\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"{{project_name}}/internal/apis/crudApis\"\n)\n\n",
    "struct": {
      "header": "var (\n\tApi *gin.RouterGroup\n)\n\nfunc InitCRUDRouterGroup(engine *gin.RouterGroup) {\n\tApi = engine.Group(\"crud\")\n",
      "row": "\tApi.Any(\"{{PackageName}}\", crudApis.{{StructName}}Api)\n",
      "footer": "\n}"
    }
  }
}